# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

Wetstamp.DEFAULTS =
    class: "bottom right"
    rotate: 0
    position: <%= Magick::SouthEastGravity.to_i %>
    tiled: false

class Wetstamp.StampPreset

  constructor: (el) ->
    @el = el
    {@class, @rotate, @transparency, @position, @tiled, @translate} = $.extend( {}, Wetstamp.DEFAULTS, @el.data() );
    
    @el.on "click", () =>
      @applyToForm()
      if Wetstamp.stamp?
        Wetstamp.stamp.setClassAndStyleFromPreset(@)
    @

  applyToForm: =>
    Wetstamp.form.rotate = @rotate
    Wetstamp.form.position = @position
    Wetstamp.form.tiled = @tiled
    @

class Wetstamp.Stamp

  constructor: (json) ->
    @id = json.id
    @url = json.image.url
    @el = $("#watermark")
    @redraw()
    @class = ""
    @size = 25
    @transparency = 0.25
    @

  urlObject: =>
    obj = document.createElement('a')
    obj.href = @url
    obj

  fileName: =>
    pathArr = @urlObject().pathname.split('/')
    pathArr[pathArr.length - 1]

  updateFile: (json) ->
    @id = json.id
    @url = json.image.url
    @redraw

  setClassAndStyleFromPreset: (preset) =>
    @klass = preset.class
    @redraw()

  changeSize: (delta) =>
    @size += delta
    @size = Math.max(@size, 0) # Max sure it's not less than 0
    @redraw()

  changeTransparency: (delta) =>
    @transparency += delta
    @transparency = Math.max(@transparency, 0) # Max sure it's >= 0
    @transparency = Math.min(@transparency, 1) # Max sure it's <= 1
    @redraw()

  redraw: =>
    style = "opacity: #{@transparency}; width: #{@size}%;"
    @el.html("<img src='"+@url+"' alt='"+@fileName()+"' class='"+@klass+"' style='"+style+"'/>")

class Wetstamp.StampForm

  constructor: (el) ->

    @el = el

    # Things to watch and listen to
    @stampImageForm = @el.find("form#new_stamp_image")
    @sizeInput = @el.find("input#stamp_size")
    @transparencyInput = @el.find("input#stamp_transparency")

    @stampImageForm.find("input").on "change", () =>
      @stampImageForm.submit()

    @stampImageForm.on "ajax:remotipartComplete", (e, data) ->
      stamp_json = JSON.parse(data.responseText)
      if Wetstamp.stamp?
        Wetstamp.stamp.updateFile(stamp_json)
      else
        Wetstamp.stamp = new Wetstamp.Stamp(stamp_json)
        Wetstamp.stamp.setClassAndStyleFromPreset(Wetstamp.STAMP_PRESETS[0])

    @el.find("button").on "click", (event) =>
      btn = $(event.currentTarget)

      delta = parseFloat(btn.data('delta'))
      
      switch btn.data('for')
        when "size"
          Wetstamp.stamp.changeSize delta
        when "transparency"
          Wetstamp.stamp.changeTransparency delta
      


    # Things we'll submit
    {@stampImageId, @size, @transparency, @position, @rotate, @tiled} = {}

    @

  errors: =>
    errors = []
    errors.push "You need to upload a watermark" unless @stampImageId?

  submit: =>
    return false if @errors().length
    console.log @stampImageId, @size, @transparency, @position, @rotate, @tiled

$(document).ready ->

  Wetstamp.STAMP_PRESETS = []
  for presetLink in $("a[data-role='watermark-preset']")
    preset = new Wetstamp.StampPreset($(presetLink))
    Wetstamp.STAMP_PRESETS.push preset
  
  Wetstamp.form = new Wetstamp.StampForm($("#wetstamp-form"))

  <% if Rails.env.development? %>
  url = "<%= StampImage.last.image.url %>"
  Wetstamp.stamp = new Wetstamp.Stamp({id: -1, image: {url: url}})
  Wetstamp.stamp.setClassAndStyleFromPreset(Wetstamp.STAMP_PRESETS[0]);
  <% end %>